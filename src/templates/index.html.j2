<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>L'Altruite</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.3/css/bootstrap.min.css" integrity="sha512-SbiR/eusphKoMVVXysTKG/7VseWii+Y3FdHrt0EpKgpToZeemhqHeZeLWLhJutz/2ut2Vw1uQEj2MbRF+TVBUA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/codemirror.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/mode/sparql/sparql.min.js"></script>
    <link rel="icon" type="image/png" href="img/logo.jpg" property="image">
    <meta name="description" content="API pour l'Altruite" property="og:description">
    <meta name="keywords" content="API, Altruite, Poisson, IMT, Semantic Web" property="og:keywords">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" property="og:type">
    <meta content="img/logo.jpg" property="og:image">
</head>
<body>

<div class="content">
    <section class="header">
        <div class="headerContainer">
            <img class="logo" src="img/logo.jpg" alt="logo">
            <h1>L'Altruite <span class="headline"> API pour l'Altruite </span></h1>
        </div>
        <nav>
            <ul class="authors">
                <span class="authorsTitle"> Auteurs : </span>
                <a href="https://github.com/lpi-code" target="_blank"> <li> PL </li> </a>
                <a href="https://github.com/arthurmtx" target="_blank"> <li> PA </li> </a>
                <a href="https://github.com/nobozor" target="_blank"> <li> MM </li> </a>
            </ul>
        </nav>
        <a href="https://github.com/lpi-code/IMT-Altruite-SemanticWeb" target="_blank"> GitHub </a>
        <a href="https://mtx.dev/ontology/fishes" target="_blank"> Ontology </a>
        <a href="https://service.tib.eu/webvowl/#iri=https://mtx.dev/ontology/fishes" target="_blank"> Visualisation </a>
    </section>

    <section class="routes">
        <h1>Routes</h1>

        <ul>
            {% for route in routes %}
                <li><a href="/api/{{route}}" target="_blank">{{route}}</a></li>
            {% endfor %}
        </ul>

    </section>

    <section>
         <h1>Visualisation </h1>
        <iframe src="https://service.tib.eu/webvowl/#iri=https://mtx.dev/ontology/fishes" width="100%" height="1000px" frameborder="0"></iframe>
    </section>

    <section class="query">
        <h1>SPARQL Query</h1>

        <div class="container-fluid">
            <div class="row">
                <div class="col-6">
                    <form action="/" method="post" id="queryForm">
                        <div class="form-group queryArea">
                            <textarea class="form-control" id="sparqlQuery" name="sparqlQuery" rows="20" placeholder="Rédigez une requête SPARQL ici" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary" id="submitButton">Envoyer</button>
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Exemples
                        </button>
                        <ul class="dropdown-menu">
                            {% for route in routes %}
                                {% set routeName = route.capitalize().replace('_', ' ') %}
                                <li><a class="dropdown-item" target="_blank" data-value="{{ route }}">{{ routeName }}</a></li>
                            {% endfor %}
                        </ul>
                        <button type="reset" class="btn btn-danger" id="resetButton">Réinitialiser</button>
                    </form>
                </div>
                <div class="col-6">
                    <div id="result">
                        <h3>Resultat : </h3>
                        <pre id="resultContent"></pre>
                        <p id="message"></p>
                    </div>
                </div>
            </div>
        </div>

    </section>
</div>

<div class="background"></div>

<script>
    let queryContent = document.getElementById('sparqlQuery');
    let resultContent = document.getElementById('resultContent');
    let messageContent = document.getElementById('message');
    let dropdownItems = document.querySelectorAll('.dropdown-item');
    let editor = null;

    resultContent.textContent = 'Effectuez une requête SPARQL pour voir le résultat ici';

    document.getElementById('resetButton').addEventListener('click', function(event) {
        editor.setValue('');
        resultContent.textContent = 'Effectuez une requête SPARQL pour voir le résultat ici';
        messageContent.textContent = '';
    });

    dropdownItems.forEach(function(item) {
        item.addEventListener('click', function(event) {
            let selectedValue = item.getAttribute('data-value');

            let xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
                        let response = JSON.parse(xhr.responseText);

                        // Vérifier si un éditeur existe déjà
                        if (editor) {
                            // Mettre à jour la valeur de l'éditeur existant
                            editor.setValue(response.query);
                        } else {
                            // Créer un nouvel éditeur CodeMirror
                            editor = CodeMirror.fromTextArea(document.getElementById('sparqlQuery'), {
                                mode: 'sparql',
                                lineNumbers: true,
                                theme: 'default'
                            });
                            editor.setValue(response.query);
                        }

                        // Supprimer l'attribut "required" du textarea
                        editor.getTextArea().removeAttribute('required');

                        document.getElementById('submitButton').click();
                    } else {
                        console.error('Erreur lors de la requête : ' + xhr.status);
                    }
                }
            };

            xhr.open('POST', '/get_query', true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            xhr.send(JSON.stringify({ route: selectedValue }));
        });
    });

    document.getElementById('queryForm').addEventListener('submit', function(event) {
        // Empêche la soumission du formulaire
        event.preventDefault();

        // Récupère les données du formulaire
        let form = event.target;
        let formData = new FormData(form);

        let query = editor.getValue();
        formData.set('sparqlQuery', query);

        // Envoie les données du formulaire en AJAX
        let xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
            // Si la requête est terminée
            if (xhr.readyState === XMLHttpRequest.DONE) {
                // Si la réponse est un succès
                if (xhr.status === 200) {
                    // Récupère la réponse et les messages
                    let response = JSON.parse(xhr.responseText);

                    // Si la réponse contient une erreur
                    if (response.error) {
                        resultContent.textContent = 'Erreur : ' + response.error;
                        messageContent.textContent = '';
                    } else if (response.message) {
                        resultContent.textContent = '';
                        messageContent.textContent = response.message;
                    } else if (response.result) {
                        resultContent.textContent = response.result.join('\n');
                        messageContent.textContent = '';
                    } else {
                        console.error('Réponse invalide : ' + xhr.responseText);
                    }
                } else {
                    console.error('Erreur lors de la requête : ' + xhr.status);
                }

                // Réinitialise le formulaire
                form.reset();
            }
        };

        // Envoie la requête
        xhr.open(form.method, form.action, true);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.send(formData);
    });
</script>
<script>
    // Créer un nouvel éditeur CodeMirror si le textarea existe
    if (document.getElementById('sparqlQuery')) {
        editor = CodeMirror.fromTextArea(document.getElementById('sparqlQuery'), {
            mode: 'sparql',
            lineNumbers: true,
            theme: 'default',
        });
        editor.id = 'sparqlQuery';
        editor.getWrapperElement().style.height = '100%';
        editor.refresh();
    }
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</body>
</html>